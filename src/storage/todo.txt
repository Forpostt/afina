std::unordered_map

Есть хэш-таблица, голова и хвост списка.

Вместе с каждым элементом хранится ссылка на него в списке.

std::unordered_map<string, Entry*>
Entry *head, *tail

добавление: кладем в head, потом в map
получение: найти, положить в начало, в голову, удалить из того, где было раньше
удаление: найти в списке, удалить из двусв списка, удалить экземпляр
удаление редкого: поиск tail по ключу
delete по ключу

самое редко используемое у нас в хвосте

Entry 
key — это неэффективно:( 
value
next * 
prev * 

Start/Stop, на данном этапе реализации могут быть пустыми. Предназначенны для того, чтобы инициализировать или остановить хранилище, к примеру сделать dump на диск или прочитать wal файлы
Put, безусловно сохраняет пару ключ/значение
PutIfAbsent, сохраняет пару только если в контейнере еще нет такого ключа
Set, устанавливает новое значение для ключа. Работает только если ключ уже представлен в хранилище
Delete, удаляет пару ключ/значение из хранилища
Get, возвращает значение для ключа

Реализация должна ограничивать размер размещенных данных лимитом, указанным в конструкторе. При добавлении новой пару ключ/значение, реализация должна:

Гарантировать инвариант: суммарный размер записей не превышает лимита. При необходимости реализация может вытеснять ранее вставленные данные.
При невозможности гарантировать инвариант (например, когда размер пары больше лимита) вернуть ошибку.
Размер записи считать как суммарную длину ключа и значения в байтах, т.е key.size()+value.size() при условии, что ключ и значения типа std::string

